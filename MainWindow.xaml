<Window x:Class="FirstGUI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:FirstGUI"
        mc:Ignorable="d"
        Title="MEIN FENSTER" Height="200" Width="600">

    <!--<StackPanel> --><!--Sachen aufeinander stapeln--><!--
        <TextBlock HorizontalAlignment="Center" Margin="10">Hallo Welt</TextBlock>  --><!--Margin 20 setzt ein Minimal abstand in ALLE richtngen, hier sieht man nur oben und unten, ist aber un ALLE Richtungen-->
        
        <!--Logical Tree: um zu sehen zur welche Elemente andere Elemente gehören, dank Indentation bzw. Tabulationen
         Visual Tree: --><!--
        <ListBox Height="95" Width="110">     --><!--Sachen aufeinander stapeln. Kann man Hovern und markieren(auswählen)--><!--
            <ListBoxItem Content="Element 1"/>
            <ListBoxItem Content="Element 2"/>
            <ListBoxItem Content="Element 3"/>
            <ListBoxItem Content="Element 4"/>
            --><!--Weitere Elemente in ein ListBox / StackPanel werden einfach aufeinander gestapelt--><!--
        </ListBox>

        --><!--Attributen erkennen via Symbole: Schraubenschlussel sind Properties, Blitz sind Events wie z.B. hover, Click, valuechanged... Die können automatisch erstellt werden, wie CodeSnippets--><!--
        <Button Content="Klicke mich!!" Margin="5"  Width="100" Click="Button_Click" MouseUp="Button_MouseUp" PreviewMouseUp="Button_PreviewMouseUp" PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown" PreviewMouseRightButtonUp="Button_PreviewMouseRightButtonUp"/>
        --><!--Margin war "Herausforderung", LOL ich hatte es schon selber erledigt...--><!--

    </StackPanel>-->
    
    <!--Grid sind wie Tabellen mit columns (Spalten) und- Rows (Reihen), erstmal die definitions und dann die inhälte setzen und verteilen.-->

    <!--Das ganze Grid Könnte mal iwieder in ein StackPanel gelagert werden!-->
    <!--<StackPanel>-->
        <Grid>
            <Grid.ColumnDefinitions>
                <!--<ColumnDefinition Width="2*"/>-->
                <!--* zum so groß wie möglich, mit den anderen * fair geteilt. Teilt die Breite untere einander auf, abhängig von Gewicht. 2* nimmt doppel soviel platz-->
                <!--<ColumnDefinition Width="*"/>
            <ColumnDefinition Width="100"/>-->
                <!--<ColumnDefinition Width="Auto"/> -->
                <!--Auto so breit wie es nötig für die Inhalt die es hat. Wenn leer, wird zero!-->

                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!--Und dann in die Objekte die Entsprechende Column und Row sagen.-->
            <!--Rows und Columns fangen wie arrays in 0 und 0-->
            <!--<Button>0</Button>-->
            <!--<Button Grid.Column="1" Grid.Row="1">4</Button>-->

            <!--<Button Grid.Column="1" Grid.Row="9">9999</Button> AUFPASSEN AUF außerhalb der Defined Columns und Rows etwas zu setzen!! wird falsch dargestellt!-->

            <!--<Button Grid.Column="3" Grid.Row="1" Margin="10">7 Breite auto +10 "Margin"</Button>-->
            <!--AUFPASSEN AUF außerhalb der Defined Columns und Rows etwas zu setzen!! wird falsch dargestellt!
        Diese ist nicht sichtbar nur weil es mit 5 Überdeckt worden ist-->

            <!--"Herausforderung", alles ausfullen, bis 3x3 mit Zahlen...  der letzte ein Textblock anstatt Button...wow...-->

            <!--<Button Grid.Column="3" Grid.Row="0">3</Button>-->

            <!--<Button Grid.Column="1" Grid.Row="0">1</Button>
            <Button Grid.Column="2" Grid.Row="0">2</Button>
            <Button Grid.Column="0" Grid.Row="1">3</Button>
            <Button Grid.Column="1" Grid.Row="1">4</Button>
            <Button Grid.Column="2" Grid.Row="1">5</Button>
            <Button Grid.Column="0" Grid.Row="2">6</Button>
            <Button Grid.Column="1" Grid.Row="2">7</Button>
            <TextBlock Grid.Column="2" Grid.Row="2" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="25">8</TextBlock>-->



        <Button Grid.Column="0" Grid.Row="2" Width="70" Height="40" Background="PaleVioletRed" FontSize="10" Content="klickt mich">
            <Button.Style>
                <Style TargetType="Button">
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            
                            <Setter Property="FontSize" Value="24"></Setter>
                            <Setter Property="Background" Value="Blue"></Setter>
                            <!--<Setter Property="Content" Value="VORSICHT!"></Setter>-->
                            <!--Das geht aber gar nicht, wieso?
                            Dependency Properties: wieso wenn maus weggeht sind die alte Properties zurück...warum? wir sehen es im CodeBehind...-->
                            <!--UND IRGENDWIE GEHT DIE FontSize ÄNDERN NICHT MEHR; WIESO? KEINE AHNUNG; UND IST MIR EGAL JETZT-->
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
            <!--DATABINDING - Slider Wert mit den TextBox verbinden...WIE?-->

            <!--4 Modi der Datenbindung
            Bindungsziel:   <-    oneWay            Bindungsquelle
            Bindungsziel:   <-    twoWay     ->     Bindungsquelle 
            Bindungsziel:        oneWayToSource   ->Bindungsquelle
            Bindungsziel:   <_ _ _  OneTime         Bindungsquelle - wird im Konstruktor also nur einmal während 
                                                                     der Initialisierung gemacht           
            -->
        <!-- Textbox ist das Ziel-->
        <!--<TextBox Grid.Column="0" Grid.Row="0" Width="50" Margin="10" Text="Text15"></TextBox>-->
        <!--<TextBox Grid.Column="0" Grid.Row="0" Width="50" Margin="10" Text="{Binding ElementName=MySlider, Path=Value, Mode=OneWay}"></TextBox>-->
            <!--Hier  sagen wir, den TextBox Text ist verbunden mit den Slider Element, eigentlich um sein Value, und wie? nur OneWay, so zu sagen nur darstellen was der Slider für ein Value hat.
             Wenn wir in TextBox den Wert ändern, bleibt der Slider gleich, da es nur OneWay ist-->


        <!--<TextBox Name="MyTextBox" Grid.Column="0" Grid.Row="0" Width="50" Margin="10" Text="{Binding ElementName=MySlider, Path=Value, Mode=TwoWay}"></TextBox>-->
        <!--Hier wie? TwoWay, so zu sagen  darstellen was der Slider für ein Value hat UND wenn wir in TextBox den Wert ändern, der Slider ändert sich entsprechend-->

        <!--<TextBox Name="MyTextBox" Grid.Column="0" Grid.Row="0" Width="50" Margin="10" Text="{Binding ElementName=MySlider, Path=Value, Mode=OneWayToSource}"></TextBox>-->
        <!--Nur wenn wir in TextBox den Wert ändern, der Slider ändert sich entsprechend-->

        <!--<TextBox Name="MyTextBox" Grid.Column="0" Grid.Row="0" Width="50" Margin="10" Text="{Binding ElementName=MySlider, Path=Value, Mode=OneTime}"></TextBox>-->
        <!--Nur einmal am Anfang wird gesetzt und dan nichts mehr reagiert.Auf keine Richtung-->

        <TextBox Name="MyTextBox" Grid.Column="0" Grid.Row="0" Width="50" Margin="10" Text="{Binding ElementName=MySlider, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></TextBox>
        <!--Hier wie? TwoWay,+extra  ändert sich sofort, sichtbar beim Zaheingabe 25, wird erst 2 und dan 25 bewegt, wenn wir 250 eingeben, setzt sich auf 100 (Maximum in Slicer Wet)-->

        <!--<TextBox Name="MyTextBox" Grid.Column="0" Grid.Row="0" Width="50" Margin="10" Text="{Binding ElementName=MySlider, Path=Background, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></TextBox>-->
        <!--Hier wie? TwoWay,+extra Path=Background ändert sofort der HintergrundFarbe von Slider wenn wir ein gültiger RGB Code in den Text eingeben... etwas doof aber geht -->


        <!-- Slider ist die Quelle -->
        <!--<Slider Name="MySlider" Grid.Column="0" Grid.Row="1" Minimum="0" Maximum="100"/>-->
        <Slider Name="MySlider" Grid.Column="0" Grid.Row="1" Minimum="0" Maximum="100" IsSnapToTickEnabled="True"/> <!--IsSnapToTickEnabled:Nur ganzzählige Werte darstellen.-->


        <!--Wir wollen zwei Zahlen eingeben und sofort die Summe berechnet bekommen. 
            Dafür ist ein INotifyPropertyChanged Interface erforderlich, dafür muss man eine neue Klasse hinzufügen.
            -->
        <Label Grid.Column="1" Grid.Row="0" Content="Zahl1"></Label>
        <TextBox Grid.Column="1" Grid.Row="0" Width="80" Height=" 25" Text="{Binding Path=Num1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></TextBox>
        <Label Grid.Column="1" Grid.Row="1" Content="Zahl2"></Label>
        <TextBox Grid.Column="1" Grid.Row="1" Width="80" Height=" 25" Text="{Binding Path=Num2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></TextBox>
        <Label Grid.Column="1" Grid.Row="2" Content="Summe"></Label>
        <TextBox Grid.Column="1" Grid.Row="2" Width="80" Height=" 25" Text="{Binding Path=Result, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                                                                               <!--UpdateSourceTrigger=PropertyChanged um die änderungen sofort zu übernehmen-->

    </Grid>
    

    <!--Diese Buttons gehören zu den Stackpanel darstellung-->
        <!--<Button>Hey</Button>
        <Button>Hey</Button>
        <Button>Hey</Button>-->
    <!--</StackPanel>-->
    
    
    <!--Kommentare einfügen-->
    <!-- eXtensible Application Markup Language -->
    <!--<Grid>
        --><!--<TextBox  HorizontalAlignment="Left" Height="23" Margin="50,50,0,0" TextWrapping="Wrap" Text="Hey Hallo! Ich bin ein TextBox! Gar kein Label oder so was...!" VerticalAlignment="Top" Width="390" />-->
        <!--<TextBlock HorizontalAlignment="Left" Margin="50,100,0,0" TextWrapping="Wrap" Text="HALLO ANDRES..." VerticalAlignment="Top"/>

        <Button Content="Dies ist ein Button" HorizontalAlignment="Left" Margin="50,150,0,0" VerticalAlignment="Top" Width="150"/>
        <Button Content="click mich!" Height="40" Width="100"  FontSize="16" />-->        
        <!--Um Code-Snippets oder wie auch immer zu verwenden, einfach der > eingeben, damit wird automatisch das Objekt schluss selber generiert! SEHR PRAKTISCH!!--><!--
        <Button>
            <Button.FontSize>32</Button.FontSize>
            <Button.Width>250</Button.Width>
            <Button.Height>100</Button.Height>
            <Button.Content>
                <WrapPanel>
                    --><!--wrappanel versuch die Inhälte nebeninander von links zu rechts zu zeigen 
                    und wenn es nicht mehr passt in eine neue Linie!--><!--
                    <TextBlock Foreground="Blue" Background="Gray" >Multi</TextBlock>
                    --><!--Vordergrund,bzw. Schriftfarbe--><!--
                    <TextBlock Foreground="Red" Background="Gray" >Color</TextBlock>
                    <TextBlock Foreground="green" Background="Gray" >Button</TextBlock>
                </WrapPanel>
            </Button.Content>
        </Button>
    </Grid>-->
    
    
</Window>
