<Window x:Class="FirstGUI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:FirstGUI"
        mc:Ignorable="d"
        Title="MEIN FENSTER" Height="200" Width="250">

    <!--<StackPanel> --><!--Sachen aufeinander stapeln--><!--
        <TextBlock HorizontalAlignment="Center" Margin="10">Hallo Welt</TextBlock>  --><!--Margin 20 setzt ein Minimal abstand in ALLE richtngen, hier sieht man nur oben und unten, ist aber un ALLE Richtungen-->
        
        <!--Logical Tree: um zu sehen zur welche Elemente andere Elemente gehören, dank Indentation bzw. Tabulationen
         Visual Tree: --><!--
        <ListBox Height="95" Width="110">     --><!--Sachen aufeinander stapeln. Kann man Hovern und markieren(auswählen)--><!--
            <ListBoxItem Content="Element 1"/>
            <ListBoxItem Content="Element 2"/>
            <ListBoxItem Content="Element 3"/>
            <ListBoxItem Content="Element 4"/>
            --><!--Weitere Elemente in ein ListBox / StackPanel werden einfach aufeinander gestapelt--><!--
        </ListBox>

        --><!--Attributen erkennen via Symbole: Schraubenschlussel sind Properties, Blitz sind Events wie z.B. hover, Click, valuechanged... Die können automatisch erstellt werden, wie CodeSnippets--><!--
        <Button Content="Klicke mich!!" Margin="5"  Width="100" Click="Button_Click" MouseUp="Button_MouseUp" PreviewMouseUp="Button_PreviewMouseUp" PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown" PreviewMouseRightButtonUp="Button_PreviewMouseRightButtonUp"/>
        --><!--Margin war "Herausforderung", LOL ich hatte es schon selber erledigt...--><!--

    </StackPanel>-->
    
    <!--Grid sind wie Tabellen mit columns (Spalten) und- Rows (Reihen), erstmal die definitions und dann die inhälte setzen und verteilen.-->

    <!--Das ganze Grid Könnte mal iwieder in ein StackPanel gelagert werden!-->
    <!--<StackPanel>-->
        <Grid>
            <Grid.ColumnDefinitions>
                <!--<ColumnDefinition Width="2*"/>-->
                <!--* zum so groß wie möglich, mit den anderen * fair geteilt. Teilt die Breite untere einander auf, abhängig von Gewicht. 2* nimmt doppel soviel platz-->
                <!--<ColumnDefinition Width="*"/>
            <ColumnDefinition Width="100"/>-->
                <!--<ColumnDefinition Width="Auto"/> -->
                <!--Auto so breit wie es nötig für die Inhalt die es hat. Wenn leer, wird zero!-->

                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!--Und dann in die Objekte die Entsprechende Column und Row sagen.-->
            <!--Rows und Columns fangen wie arrays in 0 und 0-->
            <Button>0</Button>
            <!--<Button Grid.Column="1" Grid.Row="1">4</Button>-->

            <!--<Button Grid.Column="1" Grid.Row="9">9999</Button> AUFPASSEN AUF außerhalb der Defined Columns und Rows etwas zu setzen!! wird falsch dargestellt!-->

            <Button Grid.Column="3" Grid.Row="1" Margin="10">7 Breite auto +10 "Margin"</Button>
            <!--AUFPASSEN AUF außerhalb der Defined Columns und Rows etwas zu setzen!! wird falsch dargestellt!
        Diese ist nicht sichtbar nur weil es mit 5 Überdeckt worden ist-->

            <!--"Herausforderung", alles ausfullen, bis 3x3 mit Zahlen...  der letzte ein Textblock anstatt Button...wow...-->

            <!--<Button Grid.Column="3" Grid.Row="0">3</Button>-->

            <Button Grid.Column="1" Grid.Row="0">1</Button>
            <Button Grid.Column="2" Grid.Row="0">2</Button>
            <Button Grid.Column="0" Grid.Row="1">3</Button>
            <Button Grid.Column="1" Grid.Row="1">4</Button>
            <Button Grid.Column="2" Grid.Row="1">5</Button>
            <Button Grid.Column="0" Grid.Row="2">6</Button>
            <Button Grid.Column="1" Grid.Row="2">7</Button>
            <TextBlock Grid.Column="2" Grid.Row="2" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="25">8</TextBlock>
        </Grid>

    <!--Diese Buttons gehören zu den Stackpanel darstellung-->
        <!--<Button>Hey</Button>
        <Button>Hey</Button>
        <Button>Hey</Button>-->
    <!--</StackPanel>-->
    
    
    <!--Kommentare einfügen-->
    <!-- eXtensible Application Markup Language -->
    <!--<Grid>
        --><!--<TextBox  HorizontalAlignment="Left" Height="23" Margin="50,50,0,0" TextWrapping="Wrap" Text="Hey Hallo! Ich bin ein TextBox! Gar kein Label oder so was...!" VerticalAlignment="Top" Width="390" />-->
        <!--<TextBlock HorizontalAlignment="Left" Margin="50,100,0,0" TextWrapping="Wrap" Text="HALLO ANDRES..." VerticalAlignment="Top"/>

        <Button Content="Dies ist ein Button" HorizontalAlignment="Left" Margin="50,150,0,0" VerticalAlignment="Top" Width="150"/>
        <Button Content="click mich!" Height="40" Width="100"  FontSize="16" />-->        
        <!--Um Code-Snippets oder wie auch immer zu verwenden, einfach der > eingeben, damit wird automatisch das Objekt schluss selber generiert! SEHR PRAKTISCH!!--><!--
        <Button>
            <Button.FontSize>32</Button.FontSize>
            <Button.Width>250</Button.Width>
            <Button.Height>100</Button.Height>
            <Button.Content>
                <WrapPanel>
                    --><!--wrappanel versuch die Inhälte nebeninander von links zu rechts zu zeigen 
                    und wenn es nicht mehr passt in eine neue Linie!--><!--
                    <TextBlock Foreground="Blue" Background="Gray" >Multi</TextBlock>
                    --><!--Vordergrund,bzw. Schriftfarbe--><!--
                    <TextBlock Foreground="Red" Background="Gray" >Color</TextBlock>
                    <TextBlock Foreground="green" Background="Gray" >Button</TextBlock>
                </WrapPanel>
            </Button.Content>
        </Button>
    </Grid>-->
    
    
</Window>
